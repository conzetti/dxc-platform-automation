---
#┌───────────────────────────────────────────────────────────────────┐
#├ Resources for Director/Operations Manager                         │
#│                                                                   │
#├ S3:                                                               │
#│ ├── PCF Automation task                                           │
#│ ├── PCF Automation docker image                                   │
#│ ├── Operations Manager state file                                 │
#│ ├── Operations Manager installation.zip                           │
#│ └── Operations Manager image file                                 │
#├ Time:                                                             │
#│ ├── One-time trigger                                              │
#│ └── Daily trigger                                                 │
#└───────────────────────────────────────────────────────────────────┘
resources:
- name: pcf-automation-tasks
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.product))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: .*tasks-(.*).zip
    endpoint: ((s3.endpoint))

- name: pcf-automation-image
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.product))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: .*image-(.*).tgz
    endpoint: ((s3.endpoint))

- name: state
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.config))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: (state.*).yml
    initial_path: initial_state.yml
    endpoint: ((s3.endpoint))

- name: installation
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.product))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    regexp: (installation*).zip
    endpoint: ((s3.endpoint))

- name: opsman-image
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.product))
    regexp: ((opsman_image_s3_versioned_regexp))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    endpoint: ((s3.endpoint))

- name: one-time-trigger
  type: time
  source:
    interval: 999999h

- name: daily-trigger
  type: time
  source:
    interval: 24h
#┌───────────────────────────────────────────────────────────────────┐
#├ Jobs for Director/Operations Manager                              │
#│                                                                   │
#├ Install Operations Manager & BOSH Director:                       │
#│ ├── Generate configurations                                       │
#│ ├── Create Operations Manager VM                                  │
#│ ├── Configure Operations Manager authentication (basic)           │
#│ ├── Configure BOSH director                                       │
#│ └── Operations Manager image file                                 │
#├ Export Operations Manager Installation:                           │
#│ ├── Generate environment configuration                            │
#│ └── Export installation.zip                                       │
#├ Upgrade Operations Manager:                                       │
#│ ├── Generate configurations                                       │
#│ └── Upgrade Operations Manager                                    │
#└───────────────────────────────────────────────────────────────────┘
jobs:
- name: install-opsman-and-director
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
    - get: one-time-trigger
      trigger: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: opsman-image
    - get: state
  - task: generate-configs
    params:
      OPSMAN_CONFIG: ((opsman_config))
      DIRECTOR_CONFIG: ((director_config))
      AUTH_CONFIG: ((auth_config))
    config:
      outputs:
        - name: config
        - name: env
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotalservices/bosh2-docker
      run:
        path: bash
        args:
        - "-c"
        - |
          bosh int <(echo "${AUTH_CONFIG}") > config/auth.yml
          bosh int <(echo "${DIRECTOR_CONFIG}") > config/director.yml
          bosh int <(echo "${ENV_CONFIG}") > env/env.yml
          bosh int <(echo "${OPSMAN_CONFIG}") > config/opsman.yml
  - task: create-vm
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-image
    ensure:
      put: state
      params:
        file: generated-state/state.yml
   - task: configure-authentication
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
  - task: configure-director
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-director.yml
  - task: apply-director-changes
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/apply-director-changes.yml

- name: export-installation
  serial: true
  plan:
  - aggregate:
    - get: daily-trigger
      trigger: true
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
  - task: generate-env
    params:
      OPSMAN_CONFIG: ((opsman_config))
    config:
      outputs:
        - name: config
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotalservices/bosh2-docker
      run:
        path: bash
        args:
        - "-c"
        - |
          bosh int <(echo "${OPSMAN_CONFIG}") > config/opsman.yml
  - task: export-installation
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/export-installation.yml
  - put: installation
    params:
      file: installation/installation.zip

- name: upgrade-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: one-time-trigger
      passed: [ install-opsman ]
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: opsman-image
      trigger: true
    - get: installation
      passed: [ export-installation ]
    - get: state
    - get: opsman-config
    - get: director-config
  - task: generate-configs
    params:
      ENV_CONFIG: ((env_config))
      OPSMAN_CONFIG: ((opsman_config))
    config:
      outputs:
        - name: config
        - name: env
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotalservices/bosh2-docker
      run:
        path: bash
        args:
        - "-c"
        - |
          bosh int <(echo "${ENV_CONFIG}") > env/env.yml
          bosh int <(echo "${OPSMAN_CONFIG}") > config/opsman.yml
  - task: upgrade-opsman
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
      image: opsman-image
    params:
      VARS_FILES: vars/opsman-vars.yml
    ensure:
      put: state
      params:
        file: generated-state/state.yml
