resources:
- name: pcf-automation-tasks
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.product))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    secret_access_key: ((s3.secret_access_key))
    regexp: .*tasks-(.*).zip

- name: pcf-automation-image
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.product))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-image-(.*).tgz

- name: springcloudproduct
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.product))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    secret_access_key: ((s3.secret_access_key))
    regexp: ((spring-cloud-services-config.product-name))-(.*).pivotal

- name: xenial-stemcell-s3
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.product))
    regexp: bosh-stemcell-(.*)-azure-hyperv-ubuntu-xenial-go_agent.tgz
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    endpoint: ((s3.endpoint))

- name: pipeline-utilities
  type: git
  source:
    uri: https://github.com/pivotalservices/pipeline-utilities.git

jobs:
- name: upload-and-stage-spring-cloud-services
  serial: true
  plan:
  - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman_target))
      OPSMAN_SKIP_SSL_VALIDATION: ((opsman_skip_ssl_validation))
      OPSMAN_USERNAME: ((opsman_user))
      OPSMAN_PASSWORD: ((opsman_password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_decryption_passphrase))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
  - get: xenial-stemcell-s3
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: springcloudproduct
  - task: upload-stemcell
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      stemcell: xenial-stemcell-s3
  - task: upload-and-stage-product
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: springcloudproduct
    params:
      ENV_FILE: env.yml

- name: configure-spring-cloud-services
  serial: true
  plan:
  - aggregate:
    - get: pipeline-utilities
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
      passed:
      - upload-and-stage-spring-cloud-services
      trigger: true
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman_target))
      OPSMAN_SKIP_SSL_VALIDATION: ((opsman_skip_ssl_validation))
      OPSMAN_USERNAME: ((opsman_user))
      OPSMAN_PASSWORD: ((opsman_password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_decryption_passphrase))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
  - task: generate-spring-cloud-services-config
    params:
      SPRING_CLOUD_SERVICES_CONFIG: ((spring-cloud-services-config))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotalservices/bosh2-docker
      outputs:
        - name: config
      run:
        path: bash
        args:
        - "-c"
        - |
          bosh int <(echo "${SPRING_CLOUD_SERVICES_CONFIG}") > config/spring-cloud-services-config.yml
  - task: configure-spring-cloud-services
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: spring-cloud-services-config.yml
      ENV_FILE: env.yml
      
- name: apply-product-changes
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
      passed:
      - configure-spring-cloud-services
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman_target))
      OPSMAN_SKIP_SSL_VALIDATION: ((opsman_skip_ssl_validation))
      OPSMAN_USERNAME: ((opsman_user))
      OPSMAN_PASSWORD: ((opsman_password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_decryption_passphrase))
      OPSMAN_CONNECT_TIMEOUT: 1600
  - task: apply-spring-cloud-services-changes
    image: pcf-automation-image
    config:
      platform: linux
      inputs:
        - name: env
      run:
        path: bash
        args:
          - "-c"
          - |
            om --env=env/env.yml apply-changes --product-name=((spring-cloud-services-config.product-name))

- name: staged-spring-cloud-services-config
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman_target))
      OPSMAN_SKIP_SSL_VALIDATION: ((opsman_skip_ssl_validation))
      OPSMAN_USERNAME: ((opsman_user))
      OPSMAN_PASSWORD: ((opsman_password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_decryption_passphrase))
      OPSMAN_CONNECT_TIMEOUT: 1600
  - task: staged-config
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/staged-config.yml
    params:
      PRODUCT_NAME: ((spring-cloud-services-config.product-name))
      ENV_FILE: env.yml
