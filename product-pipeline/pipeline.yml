resources:
- name: pcf-automation-tasks
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.product))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    secret_access_key: ((s3.secret_access_key))
    regexp: .*tasks-(.*).zip

- name: pcf-automation-image
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.product))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-image-(.*).tgz

- name: product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.product))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    secret_access_key: ((s3.secret_access_key))
    regexp: ((config.product-name))-(.*).pivotal

- name: stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets.product))
    regexp: ((stemcell_regex))
    region_name: ((s3.region_name))
    secret_access_key: ((s3.secret_access_key))
    endpoint: ((s3.endpoint))

- name: pipeline-utilities
  type: git
  source:
    uri: https://github.com/pivotalservices/pipeline-utilities.git

jobs:
- name: upload-stemcell-dependency
  plan:
  - task: download-stemcell-from-pivnet
    params:
      PIVNET_TOKEN: ((pivnet_token))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pmatuska/pivnet-cli
          tag: v1
      outputs:
        - name: stemcells
      run:
        path: bash
        args:
        - "-c"
        - |
          cd stemcells
          pivnet login --api-token=${PIVNET_TOKEN}
          if [ `pivnet release-dependencies -p ((config.product-name)) -r ((product_version))| grep -c Xenial` -gt 0 ]
          then
            STEMCELL_TYPE=stemcell-ubuntu-xenial
          else
            STEMCELL_TYPE=stemcell
          fi
          STEMCELL_VER=`pivnet release-dependencies -p ((config.product-name)) -r ((product_version))| grep -i Stemcells| awk -F"|" '{ print $3 }'| sort -rn| head -1| sed -e 's/\ //g'`
          pivnet download-product-files -p stemcells -r ${STEMCELL_VER} -g "*azure*" --accept-eula
  - put: stemcell
    params:
      file: stemcells/*azure* 

- name: upload-and-stage-((config.product-name))
  serial: true
  plan:
  - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman_target))
      OPSMAN_SKIP_SSL_VALIDATION: ((opsman_skip_ssl_validation))
      OPSMAN_USERNAME: ((opsman_user))
      OPSMAN_PASSWORD: ((opsman_password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_decryption_passphrase))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
  - get: stemcell
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: product
  - task: upload-stemcell
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      stemcell: stemcell
  - task: upload-and-stage-product
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/upload-and-stage-product.yml
    input_mapping:
      product: product
    params:
      ENV_FILE: env.yml

- name: configure-((config.product-name))
  serial: true
  plan:
  - aggregate:
    - get: pipeline-utilities
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
      passed:
      - upload-and-stage-((config.product-name))
      trigger: true
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman_target))
      OPSMAN_SKIP_SSL_VALIDATION: ((opsman_skip_ssl_validation))
      OPSMAN_USERNAME: ((opsman_user))
      OPSMAN_PASSWORD: ((opsman_password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_decryption_passphrase))
      OPSMAN_CONNECT_TIMEOUT: 1600
      OPSMAN_REQUEST_TIMEOUT: 600
  - task: generate-((config.product-name))-config
    params:
      CONFIG: ((config))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotalservices/bosh2-docker
      outputs:
        - name: config
      run:
        path: bash
        args:
        - "-c"
        - |
          bosh int <(echo "${CONFIG}") > config/((config.product-name))-config.yml
  - task: configure-((config.product-name))
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/configure-product.yml
    params:
      CONFIG_FILE: ((config.product-name))-config.yml
      ENV_FILE: env.yml
      
- name: apply-product-changes
  serial: true
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
      passed:
      - configure-((config.product-name))
      trigger: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman_target))
      OPSMAN_SKIP_SSL_VALIDATION: ((opsman_skip_ssl_validation))
      OPSMAN_USERNAME: ((opsman_user))
      OPSMAN_PASSWORD: ((opsman_password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_decryption_passphrase))
      OPSMAN_CONNECT_TIMEOUT: 1600
  - task: apply-((config.product-name))-changes
    image: pcf-automation-image
    config:
      platform: linux
      inputs:
        - name: env
      run:
        path: bash
        args:
          - "-c"
          - |
            om --env=env/env.yml apply-changes --product-name=((config.product-name))

- name: staged-((config.product-name))-config
  plan:
  - aggregate:
    - get: pcf-automation-image
      params:
        unpack: true
    - get: pcf-automation-tasks
      params:
        unpack: true
    - get: pipeline-utilities
  - task: create-env-file
    file: pipeline-utilities/tasks/create-env-file.yml
    params:
      OPSMAN_TARGET: ((opsman_target))
      OPSMAN_SKIP_SSL_VALIDATION: ((opsman_skip_ssl_validation))
      OPSMAN_USERNAME: ((opsman_user))
      OPSMAN_PASSWORD: ((opsman_password))
      OPSMAN_DECRYPTION_PASSPHRASE: ((opsman_decryption_passphrase))
      OPSMAN_CONNECT_TIMEOUT: 1600
  - task: staged-config
    image: pcf-automation-image
    file: pcf-automation-tasks/tasks/staged-config.yml
    params:
      PRODUCT_NAME: ((config.product-name))
      ENV_FILE: env.yml
